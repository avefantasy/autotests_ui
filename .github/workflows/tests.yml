# Имя workflow, которое будет отображаться в интерфейсе GitHub Actions
name: UI tests

# Указываем, когда будет запускаться данный workflow
on:
  push:
    branches:
      - main  # Запускать workflow при коммитах в ветку main
  pull_request:
    branches:
      - main  # Запускать workflow при создании pull request в ветку main

jobs:
  # ПЕРВАЯ ДЖОБА: запуск тестов и сохранение результатов
  run-tests:
    runs-on: ubuntu-latest  # Указываем, что тесты будут запускаться на Ubuntu

    steps:
      # 1. Клонируем репозиторий на виртуальную машину
      - name: Check out repository
        uses: actions/checkout@v4  # GitHub Action для клонирования репозитория

      # 2. Устанавливаем Python на виртуальную машину
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Указываем используемую версию Python

      # 3. Устанавливаем зависимости проекта
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Обновляем pip до последней версии
          pip install -r requirements.txt       # Устанавливаем зависимости из requirements.txt
          playwright install --with-deps        # Устанавливаем браузеры для Playwright

      # 4. Запускаем тесты и генерируем результаты для Allure
      - name: Run Playwright tests with pytest and generate Allure results
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses 4  # Запускаем тесты с тегом regression, сохраняем результаты в allure-results

      # 5. Сохраняем результаты тестов как артефакт (для передачи в следующую джобу)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results          # Имя артефакта
          path: allure-results/         # Путь к директории с результатами
          retention-days: 1             # Хранить артефакт 1 день


  # ВТОРАЯ ДЖОБА: генерация и публикация Allure отчёта
  publish-report:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      # 1. Клонируем основной репозиторий
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Загружаем артефакт с результатами тестов
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # 3. Клонируем ветку gh-pages в папку gh-pages
      - name: Get Allure history from gh-pages
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # 4. Переносим папку истории из gh-pages в allure-history
      - name: Copy history from previous report
        run: |
          mkdir -p allure-history
          if [ -d "gh-pages/history" ]; then
            cp -r gh-pages/history allure-history/
          fi

      # 5. Генерируем новый Allure отчёт
      - name: Generate Allure Report with history
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: allure-results
          allure_history: allure-history
          keep_reports: 20

      # 6. Деплоим отчёт в ветку gh-pages
      - name: Deploy report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history